To configure SSL termination on the load balancer only in <%= vars.product_name %>:

1. Create an A record in your DNS that points to your load balancer IP address. The A record associates the **System domain** and **Apps domain** that you configure in the **Domains** pane of the PAS tile with the IP  address of your load balancer.
    <br />
    <br />
    For example, with `cf.example.com` as the main subdomain for your Cloud Foundry deployment and a load balancer IP address `198.51.100.1`, you must create an A record in your DNS that serves `example.com` and points `*.cf` to `198.51.100.1`.

    <table border="1" class="nice" >
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Data</th>
        <th>Domain</th>
      </tr>
      <tr>
        <td>*.cf</td>
        <td>A</td>
        <td>198.51.100.1</td>
        <td>example.com</td>
      </tr>
    </table>

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the PAS tile in the Installation Dashboard.

1. Click **Networking**.

1. For <%= vars.product_name %> deployments on OpenStack or vSphere, choose IP addresses for the Gorouters from the subnet configured for Ops Manager and enter them in the **Router IPs** field. Then configure your load balancer to forward requests for the above domains to these IP addresses. For more information, see the [Configure Networking](../customizing/configure-pas.html#networking) section of the _Configuring PAS_ topic.

1. In the **Certificates and private keys for HAProxy and Router** field, click the **Add** button to define one certificate keypair for HAProxy and the Gorouter. Since you have opted for unencrypted traffic behind the load balancer, then you can generate an RSA certificate in PAS.

1. In the **Minimum version of TLS supported by HAProxy and Router**, select the minimum version of TLS to use in HAProxy communications. HAProxy use TLS v1.2 by default. If you need to accommodate clients that use an older version of TLS, select a lower minimum version. For a list of TLS ciphers supported by the HAProxy, see [Cipher Suites](#ciphers).

1. Under **TLS termination point**, select **Infrastructure load balancer**. 

1. If you want to use a specific set of TLS ciphers for HAProxy, configure **TLS cipher suites for HAProxy**. Enter an ordered, colon-separated list of TLS cipher suites in the OpenSSL format. For example, if you have selected support for an earlier version of TLS, you can enter cipher suites supported by this version. Otherwise, leave the default values in this field.

1. Under **HAProxy forwards requests to Router over TLS**, select **Disable**.

1. (Optional) If you are not using SSL encryption or if you are using self-signed certificates, you can enable the **Disable SSL certificate verification for this environment** checkbox. Enabling this checkbox also disables SSL verification for route services. 
  <p class="note"><strong>Note:</strong> Enable this checkbox only for development and testing environments. Do not enable it for production environments.</p>
  
1. (Optional) If you do not want the Gorouter to accept any non-encrypted HTTP traffic, enable the **Disable HTTP on HAProxy and Router** checkbox.

1. Click **Save**.

1. After you complete the configuration in <%= vars.product_name %>, add your certificate or certificates to your load balancer and configure its listening port. The procedures vary depending on your IaaS.

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests.
    <br/>If the load balancer cannot be configured to provide the `X-Forwarded-For` header, the Gorouter appends it in requests forwarded to apps and system components, set to the IP address of the load balancer.
    <p class='note'><strong>Note:</strong> If the load balancer accepts unencrypted requests, it <strong>must</strong> provide the <code>X-Forwarded-Proto</code> header. Conversely, if the load balancer cannot be configured to send the <code>X-Forwarded-Proto</code> header, it should not accept unencrypted requests. Otherwise, apps and platform system components that require encrypted client requests accept unencrypted requests when they should not accept them.</p>
